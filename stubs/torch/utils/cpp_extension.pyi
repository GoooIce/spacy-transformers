# Stubs for torch.utils.cpp_extension (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._cpp_extension_versioner import ExtensionVersioner
from .file_baton import FileBaton
from setuptools.command.build_ext import build_ext
from typing import Any, Optional

IS_WINDOWS: Any
MINIMUM_GCC_VERSION: Any
MINIMUM_MSVC_VERSION: Any
ABI_INCOMPATIBILITY_WARNING: str
WRONG_COMPILER_WARNING: str
CUDA_HOME: Any
CUDNN_HOME: Any
BUILT_FROM_SOURCE_VERSION_PATTERN: Any
COMMON_NVCC_FLAGS: Any
JIT_EXTENSION_VERSIONER: Any

def get_default_build_root(): ...
def check_compiler_ok_for_platform(compiler: Any): ...
def check_compiler_abi_compatibility(compiler: Any): ...

class BuildExtension(build_ext):
    @classmethod
    def with_options(cls, **options: Any): ...
    no_python_abi_suffix: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    cflags: Any = ...
    def build_extensions(self): ...
    def get_ext_filename(self, ext_name: Any): ...

def CppExtension(name: Any, sources: Any, *args: Any, **kwargs: Any): ...
def CUDAExtension(name: Any, sources: Any, *args: Any, **kwargs: Any): ...
def include_paths(cuda: bool = ...): ...
def library_paths(cuda: bool = ...): ...
def load(name: Any, sources: Any, extra_cflags: Optional[Any] = ..., extra_cuda_cflags: Optional[Any] = ..., extra_ldflags: Optional[Any] = ..., extra_include_paths: Optional[Any] = ..., build_directory: Optional[Any] = ..., verbose: bool = ..., with_cuda: Optional[Any] = ..., is_python_module: bool = ...): ...
def load_inline(name: Any, cpp_sources: Any, cuda_sources: Optional[Any] = ..., functions: Optional[Any] = ..., extra_cflags: Optional[Any] = ..., extra_cuda_cflags: Optional[Any] = ..., extra_ldflags: Optional[Any] = ..., extra_include_paths: Optional[Any] = ..., build_directory: Optional[Any] = ..., verbose: bool = ..., with_cuda: Optional[Any] = ..., is_python_module: bool = ...): ...
def verify_ninja_availability(): ...
