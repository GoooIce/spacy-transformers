# Stubs for torch.jit.quantized (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import torch
from torch import Tensor
from typing import Any, Optional, Tuple

class QuantizedLinear(torch.jit.ScriptModule):
    __constants__: Any = ...
    in_features: Any = ...
    out_features: Any = ...
    weight: Any = ...
    col_offsets: Any = ...
    bias: Any = ...
    def __init__(self, other: Any) -> None: ...
    def forward(self, input: Any): ...
    def extra_repr(self): ...

class QuantizedRNNCellBase(torch.jit.ScriptModule):
    __constants__: Any = ...
    input_size: Any = ...
    hidden_size: Any = ...
    bias: Any = ...
    bias_ih: Any = ...
    bias_hh: Any = ...
    def __init__(self, other: Any) -> None: ...
    def extra_repr(self): ...
    def check_forward_input(self, input: Any) -> None: ...
    def check_forward_hidden(self, input: Tensor, hx: Tensor, hidden_label: str=...) -> None: ...

class QuantizedRNNCell(QuantizedRNNCellBase):
    __constants__: Any = ...
    nonlinearity: Any = ...
    def __init__(self, other: Any) -> None: ...
    def forward(self, input: Tensor, hx: Optional[Tensor]=...) -> Tensor: ...

class QuantizedLSTMCell(QuantizedRNNCellBase):
    def __init__(self, other: Any) -> None: ...
    def forward(self, input: Tensor, hx: Optional[Tuple[Tensor, Tensor]]=...) -> Tuple[Tensor, Tensor]: ...

class QuantizedGRUCell(QuantizedRNNCellBase):
    def __init__(self, other: Any) -> None: ...
    def forward(self, input: Tensor, hx: Optional[Tensor]=...) -> Tensor: ...

def quantize_rnn_cell_modules(module: Any): ...
def quantize_linear_modules(module: Any): ...
