# Stubs for torch.jit.frontend (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from torch._C._jit_tree_views import *
from typing import Any, Optional

def is_reserved_name(name: Any): ...

pretty_node_names: Any
node_start_tokens: Any

class FrontendError(Exception):
    source_range: Any = ...
    msg: Any = ...
    def __init__(self, source_range: Any, msg: Any) -> None: ...

class NotSupportedError(FrontendError): ...

class UnsupportedNodeError(NotSupportedError):
    def __init__(self, ctx: Any, offending_node: Any) -> None: ...

class FrontendTypeError(FrontendError): ...

def build_stmts(ctx: Any, stmts: Any): ...
def get_jit_class_def(cls, self_name: Any): ...
def get_jit_def(fn: Any, self_name: Optional[Any] = ...): ...

class SourceContext(SourceRangeFactory):
    uses_true_division: Any = ...
    def __init__(self, source: Any, uses_true_division: bool = ...) -> None: ...

class Builder:
    def __call__(self, ctx: Any, node: Any): ...

def build_class_def(ctx: Any, py_def: Any, methods: Any, self_name: Any): ...
def build_def(ctx: Any, py_def: Any, type_line: Any, self_name: Optional[Any] = ...): ...
def build_param_list(ctx: Any, py_args: Any, self_name: Any): ...
def build_param(ctx: Any, py_arg: Any, self_name: Any, kwarg_only: Any): ...
def get_default_args(fn: Any): ...

class StmtBuilder(Builder):
    augassign_map: Any = ...
    @staticmethod
    def build_Expr(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Assign(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Return(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Raise(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Assert(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_AugAssign(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_While(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_For(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_If(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Print(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Pass(ctx: Any, stmt: Any): ...

class ExprBuilder(Builder):
    binop_map: Any = ...
    unop_map: Any = ...
    boolop_map: Any = ...
    cmpop_map: Any = ...
    @staticmethod
    def build_Attribute(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Call(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Ellipsis(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Name(ctx: Any, expr: Any): ...
    @staticmethod
    def build_NameConstant(ctx: Any, expr: Any): ...
    @staticmethod
    def build_BinOp(ctx: Any, expr: Any): ...
    @staticmethod
    def build_UnaryOp(ctx: Any, expr: Any): ...
    @staticmethod
    def build_BoolOp(ctx: Any, expr: Any): ...
    @staticmethod
    def build_IfExp(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Compare(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Subscript(ctx: Any, expr: Any): ...
    @staticmethod
    def build_List(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Tuple(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Dict(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Num(ctx: Any, expr: Any): ...
    @staticmethod
    def build_Str(ctx: Any, expr: Any): ...
    @staticmethod
    def build_ListComp(ctx: Any, stmt: Any): ...
    @staticmethod
    def build_Starred(ctx: Any, expr: Any): ...

build_expr: Any
build_stmt: Any

def find_after(ctx: Any, pos: Any, substr: Any, offsets: Any = ...): ...
def find_before(ctx: Any, pos: Any, substr: Any, offsets: Any = ...): ...
