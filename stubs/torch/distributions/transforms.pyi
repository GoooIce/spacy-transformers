# Stubs for torch.distributions.transforms (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class Transform:
    bijective: bool = ...
    event_dim: int = ...
    def __init__(self, cache_size: int = ...) -> None: ...
    @property
    def inv(self): ...
    @property
    def sign(self) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __call__(self, x: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any) -> None: ...

class _InverseTransform(Transform):
    def __init__(self, transform: Any) -> None: ...
    def domain(self): ...
    def codomain(self): ...
    @property
    def bijective(self): ...
    @property
    def sign(self): ...
    @property
    def event_dim(self): ...
    @property
    def inv(self): ...
    def __eq__(self, other: Any): ...
    def __call__(self, x: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

class ComposeTransform(Transform):
    parts: Any = ...
    def __init__(self, parts: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def domain(self): ...
    def codomain(self): ...
    def bijective(self): ...
    def sign(self): ...
    def event_dim(self): ...
    @property
    def inv(self): ...
    def __call__(self, x: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

identity_transform: Any

class ExpTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    bijective: bool = ...
    sign: int = ...
    def __eq__(self, other: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

class PowerTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    bijective: bool = ...
    sign: int = ...
    def __init__(self, exponent: Any, cache_size: int = ...) -> None: ...
    def __eq__(self, other: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

class SigmoidTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    bijective: bool = ...
    sign: int = ...
    def __eq__(self, other: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

class AbsTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    def __eq__(self, other: Any): ...

class AffineTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    bijective: bool = ...
    loc: Any = ...
    scale: Any = ...
    event_dim: Any = ...
    def __init__(self, loc: Any, scale: Any, event_dim: int = ..., cache_size: int = ...) -> None: ...
    def __eq__(self, other: Any): ...
    @property
    def sign(self): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

class SoftmaxTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    event_dim: int = ...
    def __eq__(self, other: Any): ...

class StickBreakingTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    bijective: bool = ...
    event_dim: int = ...
    def __eq__(self, other: Any): ...
    def log_abs_det_jacobian(self, x: Any, y: Any): ...

class LowerCholeskyTransform(Transform):
    domain: Any = ...
    codomain: Any = ...
    event_dim: int = ...
    def __eq__(self, other: Any): ...
