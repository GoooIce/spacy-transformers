# Stubs for torch.nn.modules.container (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .module import Module
from typing import Any, Optional

class Container(Module):
    def __init__(self, **kwargs: Any) -> None: ...

class Sequential(Module):
    def __init__(self, *args: Any) -> None: ...
    def __getitem__(self, idx: Any): ...
    def __setitem__(self, idx: Any, module: Any): ...
    def __delitem__(self, idx: Any) -> None: ...
    def __len__(self): ...
    def __dir__(self): ...
    def forward(self, input: Any): ...

class ModuleList(Module):
    def __init__(self, modules: Optional[Any] = ...) -> None: ...
    def __getitem__(self, idx: Any): ...
    def __setitem__(self, idx: Any, module: Any): ...
    def __delitem__(self, idx: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __iadd__(self, modules: Any): ...
    def __dir__(self): ...
    def insert(self, index: Any, module: Any) -> None: ...
    def append(self, module: Any): ...
    def extend(self, modules: Any): ...

class ModuleDict(Module):
    def __init__(self, modules: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, module: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __contains__(self, key: Any): ...
    def clear(self) -> None: ...
    def pop(self, key: Any): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def update(self, modules: Any) -> None: ...

class ParameterList(Module):
    def __init__(self, parameters: Optional[Any] = ...) -> None: ...
    def __getitem__(self, idx: Any): ...
    def __setitem__(self, idx: Any, param: Any): ...
    def __len__(self): ...
    def __iter__(self): ...
    def __iadd__(self, parameters: Any): ...
    def __dir__(self): ...
    def append(self, parameter: Any): ...
    def extend(self, parameters: Any): ...
    def extra_repr(self): ...

class ParameterDict(Module):
    def __init__(self, parameters: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, parameter: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __contains__(self, key: Any): ...
    def clear(self) -> None: ...
    def pop(self, key: Any): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def update(self, parameters: Any) -> None: ...
    def extra_repr(self): ...
