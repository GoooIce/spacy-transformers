# Stubs for torch.nn.utils.rnn (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from typing import Any, Optional

PackedSequence_ = namedtuple('PackedSequence', ['data', 'batch_sizes', 'sorted_indices', 'unsorted_indices'])

def bind(optional: Any, fn: Any): ...

class PackedSequence(PackedSequence_):
    def __new__(cls, data: Any, batch_sizes: Optional[Any] = ..., sorted_indices: Optional[Any] = ..., unsorted_indices: Optional[Any] = ...): ...
    def pin_memory(self): ...
    def cuda(self, *args: Any, **kwargs: Any): ...
    def cpu(self): ...
    def double(self): ...
    def float(self): ...
    def half(self): ...
    def long(self): ...
    def int(self): ...
    def short(self): ...
    def char(self): ...
    def byte(self): ...
    def to(self, *args: Any, **kwargs: Any): ...
    @property
    def is_cuda(self): ...
    def is_pinned(self): ...

def invert_permutation(permutation: Any): ...
def pack_padded_sequence(input: Any, lengths: Any, batch_first: bool = ..., enforce_sorted: bool = ...): ...
def pad_packed_sequence(sequence: Any, batch_first: bool = ..., padding_value: float = ..., total_length: Optional[Any] = ...): ...
def pad_sequence(sequences: Any, batch_first: bool = ..., padding_value: int = ...): ...
def pack_sequence(sequences: Any, enforce_sorted: bool = ...): ...
def get_packed_sequence(data: Any, batch_sizes: Any, sorted_indices: Any, unsorted_indices: Any): ...
