# Stubs for thinc.neural._classes.model (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ...check import has_shape, is_float, is_sequence
from ..mem import Memory
from ..ops import CupyOps, NumpyOps
from ..train import Trainer
from ..util import copy_array, get_ops
from typing import Any, Optional

THREAD_LOCAL: Any

class Model:
    name: str = ...
    id: int = ...
    lsuv: bool = ...
    ops: Any = ...
    Ops: Any = ...
    Trainer: Any = ...
    drop_factor: float = ...
    descriptions: Any = ...
    on_data_hooks: Any = ...
    on_init_hooks: Any = ...
    @classmethod
    def define_operators(cls, operators: Any) -> None: ...
    @classmethod
    def use_device(cls, device: Any) -> None: ...
    @property
    def input_shape(self) -> None: ...
    @property
    def output_shape(self) -> None: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_id(self) -> None: ...
    def begin_training(self, train_X: Any, train_y: Optional[Any] = ..., **trainer_cfg: Any): ...
    def begin_update(self, X: Any, drop: Optional[float] = ...) -> Any: ...
    def predict(self, X: Any): ...
    def predict_one(self, x: Any): ...
    def use_params(self, params: Any) -> None: ...
    def __call__(self, x: Any): ...
    def pipe(self, stream: Any, batch_size: int = ...) -> None: ...
    def update(self, stream: Any, batch_size: int = ...) -> None: ...
    def to_gpu(self, device_num: Any): ...
    def to_cpu(self) -> None: ...
    def evaluate(self, X: Any, y: Any): ...
    def evaluate_logloss(self, X: Any, y: Any, minimum: Optional[Any] = ..., maximum: Optional[Any] = ...): ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __matmul__(self, other: Any): ...
    def __div__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __pow__(self, other: Any, modulo: Optional[Any] = ...): ...
    def __lshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def to_bytes(self): ...
    def from_bytes(self, bytes_data: Any): ...
    def to_disk(self, path: Any) -> None: ...
    def from_disk(self, path: Any): ...
