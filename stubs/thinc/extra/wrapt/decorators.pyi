# Stubs for thinc.extra.wrapt.decorators (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .wrappers import BoundFunctionWrapper, CallableObjectProxy, FunctionWrapper, ObjectProxy
from typing import Any, Optional

PY2: Any
PY3: Any
string_types: Any
exec_: Any

class _AdapterFunctionCode(CallableObjectProxy):
    def __init__(self, wrapped_code: Any, adapter_code: Any) -> None: ...
    @property
    def co_argcount(self): ...
    @property
    def co_code(self): ...
    @property
    def co_flags(self): ...
    @property
    def co_kwonlyargcount(self): ...
    @property
    def co_varnames(self): ...

class _AdapterFunctionSurrogate(CallableObjectProxy):
    def __init__(self, wrapped: Any, adapter: Any) -> None: ...
    @property
    def __code__(self): ...
    @property
    def __defaults__(self): ...
    @property
    def __kwdefaults__(self): ...
    @property
    def __signature__(self): ...
    func_code: Any = ...
    func_defaults: Any = ...

class _BoundAdapterWrapper(BoundFunctionWrapper):
    @property
    def __func__(self): ...
    im_func: Any = ...

class AdapterWrapper(FunctionWrapper):
    __bound_function_wrapper__: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def __code__(self): ...
    @property
    def __defaults__(self): ...
    @property
    def __kwdefaults__(self): ...
    func_code: Any = ...
    func_defaults: Any = ...
    @property
    def __signature__(self): ...

class AdapterFactory:
    def __call__(self, wrapped: Any) -> None: ...

class DelegatedAdapterFactory(AdapterFactory):
    factory: Any = ...
    def __init__(self, factory: Any) -> None: ...
    def __call__(self, wrapped: Any): ...
adapter_factory = DelegatedAdapterFactory

def decorator(wrapper: Optional[Any] = ..., enabled: Optional[Any] = ..., adapter: Optional[Any] = ...): ...
def synchronized(wrapped: Any): ...
