# Stubs for thinc.extra.wrapt.wrappers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._wrappers import BoundFunctionWrapper, CallableObjectProxy, FunctionWrapper, ObjectProxy, PartialCallableObjectProxy, _FunctionWrapperBase
from typing import Any, Optional

PY2: Any
PY3: Any
string_types: Any

def with_metaclass(meta: Any, *bases: Any): ...

class _ObjectProxyMethods:
    @property
    def __module__(self): ...
    @__module__.setter
    def __module__(self, value: Any) -> None: ...
    @property
    def __doc__(self): ...
    @__doc__.setter
    def __doc__(self, value: Any) -> None: ...
    @property
    def __dict__(self): ...
    @property
    def __weakref__(self): ...

class _ObjectProxyMetaType(type):
    def __new__(cls, name: Any, bases: Any, dictionary: Any): ...

class ObjectProxy:
    def __init__(self, wrapped: Any) -> None: ...
    @property
    def __name__(self): ...
    @__name__.setter
    def __name__(self, value: Any) -> None: ...
    @property
    def __class__(self): ...
    @__class__.setter
    def __class__(self, value: Any) -> None: ...
    @property
    def __annotations__(self): ...
    @__annotations__.setter
    def __annotations__(self, value: Any) -> None: ...
    def __dir__(self): ...
    def __bytes__(self): ...
    def __reversed__(self): ...
    def __round__(self): ...
    def __lt__(self, other: Any): ...
    def __le__(self, other: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __gt__(self, other: Any): ...
    def __ge__(self, other: Any): ...
    def __hash__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __delattr__(self, name: Any) -> None: ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __div__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __divmod__(self, other: Any): ...
    def __pow__(self, other: Any, *args: Any): ...
    def __lshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __rdiv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __rdivmod__(self, other: Any): ...
    def __rpow__(self, other: Any, *args: Any): ...
    def __rlshift__(self, other: Any): ...
    def __rrshift__(self, other: Any): ...
    def __rand__(self, other: Any): ...
    def __rxor__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __iadd__(self, other: Any): ...
    def __isub__(self, other: Any): ...
    def __imul__(self, other: Any): ...
    __wrapped__: Any = ...
    def __idiv__(self, other: Any): ...
    def __itruediv__(self, other: Any): ...
    def __ifloordiv__(self, other: Any): ...
    def __imod__(self, other: Any): ...
    def __ipow__(self, other: Any): ...
    def __ilshift__(self, other: Any): ...
    def __irshift__(self, other: Any): ...
    def __iand__(self, other: Any): ...
    def __ixor__(self, other: Any): ...
    def __ior__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __int__(self): ...
    def __long__(self): ...
    def __float__(self): ...
    def __complex__(self): ...
    def __oct__(self): ...
    def __hex__(self): ...
    def __index__(self): ...
    def __len__(self): ...
    def __contains__(self, value: Any): ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __getslice__(self, i: Any, j: Any): ...
    def __setslice__(self, i: Any, j: Any, value: Any) -> None: ...
    def __delslice__(self, i: Any, j: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any, **kwargs: Any): ...
    def __iter__(self): ...
    def __copy__(self) -> None: ...
    def __deepcopy__(self, memo: Any) -> None: ...
    def __reduce__(self) -> None: ...
    def __reduce_ex__(self, protocol: Any) -> None: ...

class CallableObjectProxy(ObjectProxy):
    def __call__(self, *args: Any, **kwargs: Any): ...

class PartialCallableObjectProxy(ObjectProxy):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class _FunctionWrapperBase(ObjectProxy):
    def __init__(self, wrapped: Any, instance: Any, wrapper: Any, enabled: Optional[Any] = ..., binding: str = ..., parent: Optional[Any] = ...) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class BoundFunctionWrapper(_FunctionWrapperBase):
    def __call__(self, *args: Any, **kwargs: Any): ...

class FunctionWrapper(_FunctionWrapperBase):
    __bound_function_wrapper__: Any = ...
    def __init__(self, wrapped: Any, wrapper: Any, enabled: Optional[Any] = ...) -> None: ...

def resolve_path(module: Any, name: Any): ...
def apply_patch(parent: Any, attribute: Any, replacement: Any) -> None: ...
def wrap_object(module: Any, name: Any, factory: Any, args: Any = ..., kwargs: Any = ...): ...

class AttributeWrapper:
    attribute: Any = ...
    factory: Any = ...
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, attribute: Any, factory: Any, args: Any, kwargs: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __set__(self, instance: Any, value: Any) -> None: ...
    def __delete__(self, instance: Any) -> None: ...

def wrap_object_attribute(module: Any, name: Any, factory: Any, args: Any = ..., kwargs: Any = ...): ...
def function_wrapper(wrapper: Any): ...
def wrap_function_wrapper(module: Any, name: Any, wrapper: Any): ...
def patch_function_wrapper(module: Any, name: Any): ...
def transient_function_wrapper(module: Any, name: Any): ...

class WeakFunctionProxy(ObjectProxy):
    def __init__(self, wrapped: Any, callback: Optional[Any] = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
