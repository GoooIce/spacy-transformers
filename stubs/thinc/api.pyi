# Stubs for thinc.api (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .neural._classes.feed_forward import FeedForward
from .neural._classes.function_layer import FunctionLayer
from .neural._classes.model import Model
from typing import Any, Optional

def layerize(begin_update: Optional[Any] = ..., predict: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
def metalayerize(user_func: Any): ...
def flatten_add_lengths(seqs: Any, pad: int = ..., drop: float = ...): ...
def unflatten(X_lengths: Any, drop: float = ...): ...
def remap_ids(ops: Optional[Any] = ..., column: int = ...): ...
def with_reshape(layer: Any): ...
def with_getitem(idx: Any, layer: Any): ...
def noop(*layers: Any): ...
def chain(*layers: Any): ...
def clone(orig: Any, n: Any): ...
def concatenate(*layers: Any): ...
def add(*layers: Any): ...
def split_backward(layers: Any): ...
def sink_return(func: Any, sink: Any, splitter: Optional[Any] = ...): ...
def Arg(i: Any): ...
def with_square_sequences(model: Any): ...
def with_flatten(layer: Any, pad: int = ..., ndim: int = ...): ...
def get_word_ids(ops: Any, pad: int = ..., token_drop: float = ..., ignore: Optional[Any] = ...): ...
def wrap(func: Any, *child_layers: Any): ...
def uniqued(layer: Any, column: int = ...): ...
def foreach(layer: Any, drop_factor: float = ...): ...
def foreach_sentence(layer: Any, drop_factor: float = ...): ...
def with_pad_and_mask(layer: Any): ...
def pad_sequences(ops: Any, seqs_in: Any, pad_to: Optional[Any] = ...): ...
